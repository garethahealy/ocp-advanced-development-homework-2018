// Jenkinsfile for MLBParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "172.30.1.1:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `MLBParks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    stage('Checkout Source') {
      sh "git clone https://github.com/garethahealy/ocp-advanced-development-homework-2018.git ."
    }

    stage('Build Source') {
      dir("advdev_homework_template/MLBParks") {
        sh "mvn -s ../nexus_settings.xml clean package -DskipTests=true"
      }
    }

    stage('Test Source') {
      dir("advdev_homework_template/MLBParks") {
        sh "mvn -s ../nexus_settings.xml test"
      }
    }

    stage('Code Analysis') {
      dir("advdev_homework_template/MLBParks") {
        sh "mvn sonar:sonar -s ../nexus_settings.xml -Dsonar.host.url=http://sonarqube.${GUID}-sonarqube.svc.cluster.local:9000"
      }
    }

    stage('Build Container') {
      dir("advdev_homework_template/MLBParks") {
        openshift.withCluster() {
          openshift.withProject() {
            def builder = openshift.selector("buildconfig", "mlbparks-binary")
            builder.startBuild("--from-file=target/mlbparks.war").logs("-f")

            openshift.tag("mlbparks:latest", "${GUID}-parks-dev/mlbparks:latest")
          }
        }
      }
    }

    stage('Deploy to Dev') {
      dir("advdev_homework_template/MLBParks") {
        openshift.withCluster() {
          openshift.withProject("${GUID}-parks-dev") {
            def templateFile = readFile file: "openshift/template.yml", encoding: "UTF8"
            def template = openshift.process(templateFile, "PROJECT=${GUID}-parks-dev", "SERVICE_NAME=mlbparks", "APPNAME_ENV='MLB Parks (Dev)'")
            openshift.apply(template)

            def dc = openshift.selector("dc", "mlbparks")
            dc.rollout().status("--watch=true")

            def response = sh(returnStdout: true, script: "curl mlbparks.${GUID}-parks-dev.svc.cluster.local:8080/ws/info/").trim()
            echo "response == $response"
            if (!response.contains("MLB Parks (Dev)")) {
              error "Got incorrect response"
            }

            openshift.tag("mlbparks:latest", "${GUID}-parks-prod/mlbparks:latest")
          }
        }
      }
    }

    def isBlueBuild = false
    def isGreenBuild = false

    stage('Check whats deployed to Prod') {
      dir("advdev_homework_template/MLBParks") {
        openshift.withCluster() {
          openshift.withProject("${GUID}-parks-prod") {
            def blueServiceSelector = openshift.selector("svc", "mlbparks-blue")
            def greenServiceSelector = openshift.selector("svc", "mlbparks-green")

            if (!blueServiceSelector.exists() && !greenServiceSelector.exists()) {
              //First run, so deploy blue
              isBlueBuild = true
              isGreenBuild = false
            } else if (blueServiceSelector.exists()) {
              def isLabelMissing = blueServiceSelector.object().metadata.labels.type == null

              //Green is active, so deploy blue
              isBlueBuild = true
              isGreenBuild = false
            } else if (greenServiceSelector.exists()) {
              def isLabelMissing = blueServiceSelector.object().metadata.labels.type == null

              //Blue is active, so deploy green
              isBlueBuild = false
              isGreenBuild = true
            }
          }
        }
      }
    }

    stage('Deploy to Prod Blue') {
      dir("advdev_homework_template/MLBParks") {
        openshift.withCluster() {
          openshift.withProject("${GUID}-parks-prod") {
            def templateFile = readFile file: "openshift/template.yml", encoding: "UTF8"
            def template = openshift.process(templateFile, "PROJECT=${GUID}-parks-prod", "SERVICE_NAME=mlbparks-blue", "APPNAME_ENV='MLB Parks (Blue)'")
            if (isGreenBuild) {
              def svc = template.find { it.kind == "Service" }
              svc.metadata.labels.remove("type")
            }

            openshift.apply(template)

            def dc = openshift.selector("dc", "mlbparks-blue")
            dc.rollout().status("--watch=true")

            def response = sh(returnStdout: true, script: "curl mlbparks-blue.${GUID}-parks-prod.svc.cluster.local:8080/ws/info/").trim()
            echo "response == $response"
            if (!response.contains("MLB Parks (Blue)")) {
              error "Got incorrect response"
            }
          }
        }
      }
    }

    stage('Deploy to Prod Green') {
      dir("advdev_homework_template/MLBParks") {
        openshift.withCluster() {
          openshift.withProject("${GUID}-parks-prod") {
            def templateFile = readFile file: "openshift/template.yml", encoding: "UTF8"
            def template = openshift.process(templateFile, "PROJECT=${GUID}-parks-prod", "SERVICE_NAME=mlbparks-green", "APPNAME_ENV='MLB Parks (Green)'")
            if (isBlueBuild) {
              def svc = template.find { it.kind == "Service" }
              svc.metadata.labels.remove("type")
            }

            openshift.apply(template)

            def dc = openshift.selector("dc", "mlbparks-green")
            dc.rollout().status("--watch=true")

            def response = sh(returnStdout: true, script: "curl mlbparks-green.${GUID}-parks-prod.svc.cluster.local:8080/ws/info/").trim()
            echo "response == $response"
            if (!response.contains("MLB Parks (Green)")) {
              error "Got incorrect response"
            }
          }
        }
      }
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
